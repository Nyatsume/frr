--- bgpd/bgp_vty.c
+++ bgpd/bgp_vty.c
@@ -9261,43 +9262,113 @@ DEFPY (show_bgp_srv6,
 	char buf[256];
 	char buf_tovpn4_sid[256];
 	char buf_tovpn6_sid[256];
+	json_object *json = NULL;
+	json_object *json_chunks = NULL;
+	json_object *json_function = NULL;
+	json_object *json_functions = NULL;
+	json_object *json_bgp = NULL;
+	json_object *json_bgps = NULL;
+	json_object *json_vpn_policy = NULL;
+	json_object *json_vpn_policy_ip = NULL;
+	json_object *json_vpn_policy_ip6 = NULL;
+	bool uj = use_json(argc, argv);
 
 	bgp = bgp_get_default();
 	if (!bgp)
 		return CMD_SUCCESS;
 
-	vty_out(vty, "locator_name: %s\n", bgp->srv6_locator_name);
-	vty_out(vty, "locator_chunks:\n");
-	for (ALL_LIST_ELEMENTS_RO(bgp->srv6_locator_chunks, node, chunk)) {
-		prefix2str(chunk, buf, sizeof(buf));
-		vty_out(vty, "- %s\n", buf);
-	}
-
-	vty_out(vty, "functions:\n");
-	for (ALL_LIST_ELEMENTS_RO(bgp->srv6_functions, node, func)) {
-		inet_ntop(AF_INET6, &func->sid, buf, sizeof(buf));
-		vty_out(vty, "- sid: %s\n", buf);
-		vty_out(vty, "  locator: %s\n", func->locator_name);
-	}
-
-	vty_out(vty, "bgps:\n");
-	for (ALL_LIST_ELEMENTS_RO(bm->bgp, node, bgp)) {
-		vty_out(vty, "- name: %s\n",
-			bgp->name ? bgp->name : "default");
-
-		tovpn4_sid = bgp->vpn_policy[AFI_IP].tovpn_sid;
-		tovpn6_sid = bgp->vpn_policy[AFI_IP6].tovpn_sid;
-		if (tovpn4_sid)
-			inet_ntop(AF_INET6, tovpn4_sid, buf_tovpn4_sid,
-				  sizeof(buf_tovpn4_sid));
-		if (tovpn6_sid)
-			inet_ntop(AF_INET6, tovpn6_sid, buf_tovpn6_sid,
-				  sizeof(buf_tovpn6_sid));
-
-		vty_out(vty, "  vpn_policy[AFI_IP].tovpn_sid: %s\n",
-			tovpn4_sid ? buf_tovpn4_sid : "none");
-		vty_out(vty, "  vpn_policy[AFI_IP6].tovpn_sid: %s\n",
-			tovpn6_sid ? buf_tovpn6_sid : "none");
+	if (uj) {
+		json = json_object_new_object();
+		json_chunks = json_object_new_array();
+		json_functions = json_object_new_array();
+		json_bgps = json_object_new_array();
+		json_object_string_add(json, "locatorName", bgp->srv6_locator_name);
+		json_object_object_add(json, "locatorChunks", json_chunks);
+		json_object_object_add(json, "functions", json_functions);
+		json_object_object_add(json, "bgps", json_bgps);
+
+		/* collect all chunk to json array*/
+		for (ALL_LIST_ELEMENTS_RO(bgp->srv6_locator_chunks, node, chunk)) {
+			prefix2str(chunk, buf, sizeof(buf));
+			json_array_string_add(json_chunks, buf);
+		}
+
+		/* collect all function to json array*/
+		for (ALL_LIST_ELEMENTS_RO(bgp->srv6_functions, node, func)) {
+			json_function = json_object_new_object();
+			json_object_array_add(json_functions, json_function);
+			inet_ntop(AF_INET6, &func->sid, buf, sizeof(buf));
+			json_object_string_add(json_function, "Sid", buf);
+			json_object_string_add(json_function, "locator", 
+									func->locator_name);
+		}
+
+		/* collect all bgp instance to json array*/
+		for (ALL_LIST_ELEMENTS_RO(bm->bgp, node, bgp)) {
+			json_bgp = json_object_new_object();
+			json_object_array_add(json_bgps, json_bgp);
+			json_object_string_add(json_bgp, "name",
+								   bgp->name ? bgp->name : "default");
+
+			json_vpn_policy = json_object_new_object();
+			json_vpn_policy_ip = json_object_new_object();
+			json_vpn_policy_ip6 = json_object_new_object();
+			json_object_object_add(json_bgp, "vpnPolicy", json_vpn_policy);
+			json_object_object_add(json_vpn_policy, "ip", json_vpn_policy_ip);
+			json_object_object_add(json_vpn_policy, "ip6", json_vpn_policy_ip6);
+
+			tovpn4_sid = bgp->vpn_policy[AFI_IP].tovpn_sid;
+			tovpn6_sid = bgp->vpn_policy[AFI_IP6].tovpn_sid;
+			if (tovpn4_sid)
+				inet_ntop(AF_INET6, tovpn4_sid, buf_tovpn4_sid,
+					  sizeof(buf_tovpn4_sid));
+			if (tovpn6_sid)
+				inet_ntop(AF_INET6, tovpn6_sid, buf_tovpn6_sid,
+					  sizeof(buf_tovpn6_sid));
+			
+			json_object_string_add(json_vpn_policy_ip, "toVpnSid",
+								   tovpn4_sid ? buf_tovpn4_sid : "none");
+			json_object_string_add(json_vpn_policy_ip6, "toVpnSid",
+								   tovpn6_sid ? buf_tovpn6_sid : "none");
+		}
+
+		vty_out(vty, "%s\n", json_object_to_json_string_ext(
+			json, JSON_C_TO_STRING_PRETTY));
+		json_object_free(json);
+	} else {
+		vty_out(vty, "locator_name: %s\n", bgp->srv6_locator_name);
+		vty_out(vty, "locator_chunks:\n");
+		for (ALL_LIST_ELEMENTS_RO(bgp->srv6_locator_chunks, node, chunk)) {
+			prefix2str(chunk, buf, sizeof(buf));
+			vty_out(vty, "- %s\n", buf);
+		}
+
+		vty_out(vty, "functions:\n");
+		for (ALL_LIST_ELEMENTS_RO(bgp->srv6_functions, node, func)) {
+			inet_ntop(AF_INET6, &func->sid, buf, sizeof(buf));
+			vty_out(vty, "- sid: %s\n", buf);
+			vty_out(vty, "  locator: %s\n", func->locator_name);
+		}
+
+		vty_out(vty, "bgps:\n");
+		for (ALL_LIST_ELEMENTS_RO(bm->bgp, node, bgp)) {
+			vty_out(vty, "- name: %s\n",
+				bgp->name ? bgp->name : "default");
+
+			tovpn4_sid = bgp->vpn_policy[AFI_IP].tovpn_sid;
+			tovpn6_sid = bgp->vpn_policy[AFI_IP6].tovpn_sid;
+			if (tovpn4_sid)
+				inet_ntop(AF_INET6, tovpn4_sid, buf_tovpn4_sid,
+					  sizeof(buf_tovpn4_sid));
+			if (tovpn6_sid)
+				inet_ntop(AF_INET6, tovpn6_sid, buf_tovpn6_sid,
+					  sizeof(buf_tovpn6_sid));
+
+			vty_out(vty, "  vpn_policy[AFI_IP].tovpn_sid: %s\n",
+				tovpn4_sid ? buf_tovpn4_sid : "none");
+			vty_out(vty, "  vpn_policy[AFI_IP6].tovpn_sid: %s\n",
+				tovpn6_sid ? buf_tovpn6_sid : "none");
+		}
 	}
 
 	return CMD_SUCCESS;
--- bgpd/bgp_vty.c
+++ bgpd/bgp_vty.c
@@ -9277,13 +9273,15 @@ DEFPY (show_bgp_srv6,
 		json_chunks = json_object_new_array();
 		json_functions = json_object_new_array();
 		json_bgps = json_object_new_array();
-		json_object_string_add(json, "locatorName", bgp->srv6_locator_name);
+		json_object_string_add(json, "locatorName",
+				       bgp->srv6_locator_name);
 		json_object_object_add(json, "locatorChunks", json_chunks);
 		json_object_object_add(json, "functions", json_functions);
 		json_object_object_add(json, "bgps", json_bgps);
 
 		/* collect all chunk to json array*/
-		for (ALL_LIST_ELEMENTS_RO(bgp->srv6_locator_chunks, node, chunk)) {
+		for (ALL_LIST_ELEMENTS_RO(bgp->srv6_locator_chunks, node,
+					  chunk)) {
 			prefix2str(chunk, buf, sizeof(buf));
 			json_array_string_add(json_chunks, buf);
 		}
@@ -9294,8 +9292,8 @@ DEFPY (show_bgp_srv6,
 			json_object_array_add(json_functions, json_function);
 			inet_ntop(AF_INET6, &func->sid, buf, sizeof(buf));
 			json_object_string_add(json_function, "Sid", buf);
-			json_object_string_add(json_function, "locator", 
-									func->locator_name);
+			json_object_string_add(json_function, "locator",
+					       func->locator_name);
 		}
 
 		/* collect all bgp instance to json array*/
@@ -9303,14 +9301,18 @@ DEFPY (show_bgp_srv6,
 			json_bgp = json_object_new_object();
 			json_object_array_add(json_bgps, json_bgp);
 			json_object_string_add(json_bgp, "name",
-								   bgp->name ? bgp->name : "default");
+					       bgp->name ? bgp->name
+							 : "default");
 
 			json_vpn_policy = json_object_new_object();
 			json_vpn_policy_ip = json_object_new_object();
 			json_vpn_policy_ip6 = json_object_new_object();
-			json_object_object_add(json_bgp, "vpnPolicy", json_vpn_policy);
-			json_object_object_add(json_vpn_policy, "ip", json_vpn_policy_ip);
-			json_object_object_add(json_vpn_policy, "ip6", json_vpn_policy_ip6);
+			json_object_object_add(json_bgp, "vpnPolicy",
+					       json_vpn_policy);
+			json_object_object_add(json_vpn_policy, "ip",
+					       json_vpn_policy_ip);
+			json_object_object_add(json_vpn_policy, "ip6",
+					       json_vpn_policy_ip6);
 
 			tovpn4_sid = bgp->vpn_policy[AFI_IP].tovpn_sid;
 			tovpn6_sid = bgp->vpn_policy[AFI_IP6].tovpn_sid;
@@ -9320,20 +9322,24 @@ DEFPY (show_bgp_srv6,
 			if (tovpn6_sid)
 				inet_ntop(AF_INET6, tovpn6_sid, buf_tovpn6_sid,
 					  sizeof(buf_tovpn6_sid));
-			
+
 			json_object_string_add(json_vpn_policy_ip, "toVpnSid",
-								   tovpn4_sid ? buf_tovpn4_sid : "none");
+					       tovpn4_sid ? buf_tovpn4_sid
+							  : "none");
 			json_object_string_add(json_vpn_policy_ip6, "toVpnSid",
-								   tovpn6_sid ? buf_tovpn6_sid : "none");
+					       tovpn6_sid ? buf_tovpn6_sid
+							  : "none");
 		}
 
-		vty_out(vty, "%s\n", json_object_to_json_string_ext(
-			json, JSON_C_TO_STRING_PRETTY));
+		vty_out(vty, "%s\n",
+			json_object_to_json_string_ext(
+				json, JSON_C_TO_STRING_PRETTY));
 		json_object_free(json);
 	} else {
 		vty_out(vty, "locator_name: %s\n", bgp->srv6_locator_name);
 		vty_out(vty, "locator_chunks:\n");
-		for (ALL_LIST_ELEMENTS_RO(bgp->srv6_locator_chunks, node, chunk)) {
+		for (ALL_LIST_ELEMENTS_RO(bgp->srv6_locator_chunks, node,
+					  chunk)) {
 			prefix2str(chunk, buf, sizeof(buf));
 			vty_out(vty, "- %s\n", buf);
 		}
